buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_11
        gradleVersion = "6.6.1"
        kotlinVersion = "1.4.10"
        ktlintGradleVersion = "9.4.0"
        ktlintVersion = "0.39.0"
        jacksonVersion = "2.11.2"
        kluentVersion = "1.61"
        junitVersion = "5.7.0"
        detektVersion = "1.13.1"
        hivemqMqttClientVersion = "1.2.1"
        kotlinArgparser = "2.0.7"
        cliktVersion = "3.0.1"
        kotlinCoroutineVersion = "1.3.9"
        jibGradlePluginVersion = "2.5.0"
    }

    repositories {
        gradlePluginPortal()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:$jibGradlePluginVersion"

        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlintGradleVersion"
    }
}

repositories {
    jcenter()
}

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "com.google.cloud.tools.jib"

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "com.github.ajalt.clikt:clikt:$cliktVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    implementation "com.hivemq:hivemq-mqtt-client:$hivemqMqttClientVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinCoroutineVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    testImplementation("org.amshove.kluent:kluent:$kluentVersion") {
        exclude module: "mockito-kotlin"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=enable", "-Xnew-inference"]
        jvmTarget = javaVersion.toString()
        allWarningsAsErrors = true
    }
}

detekt {
    config = files("${project.rootDir}/detekt.yml")

    buildUponDefaultConfig = true

    reports {
        xml.destination = file("$buildDir/reports/detekt/detekt.xml")
        html.destination = file("$buildDir/reports/detekt/detekt.html")
    }
}

jib {
    container {
        mainClass = "de.smartsquare.kortance.KortanceKt"
    }

    from {
        image = "adoptopenjdk/openjdk14-openj9:alpine-slim"
    }

    container {
        jvmFlags = ["-Xquickstart"]
    }
}

jibDockerBuild.dependsOn check

application {
    mainClassName = "de.smartsquare.kortance.KortanceKt"
}
